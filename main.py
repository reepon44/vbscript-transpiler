import argparse
import pydot
from antlr4 import *
from gen.VBScriptLexer import VBScriptLexer
from gen.VBScriptParser import VBScriptParser
from parser.VBScriptToIRVisitor import VBScriptToIRVisitor
from antlr4.tree.Tree import TerminalNodeImpl
from generator.python_generator import PythonGenerator

def translate(code: str):
    input_stream = InputStream(code)
    lexer = VBScriptLexer(input_stream)
    stream = CommonTokenStream(lexer)
    parser = VBScriptParser(stream)
    tree = parser.prog()
    # Generate AST graph
    print(tree.toStringTree(recog=parser))
    graph = antlr_tree_to_pydot(tree)
    graph.write_png("ast.png")
    print("AST written to ast.png")

    visitor = VBScriptToIRVisitor()
    ir_nodes = visitor.visit(tree)

    generator = PythonGenerator(ir_nodes)
    python_code = generator.generate()
    print("=== Generierter Python-Code ===")
    print(python_code)
    return(python_code)

# Generated by ChatGPT-4o
def escape_label(text):
    import re
    # Entferne oder ersetze Zeichen, die in DOT problematisch sind
    text = text.replace('\\', '/')         # Backslash durch Slash ersetzen
    text = text.replace('"', "'")          # Doppelte Anführungszeichen ersetzen
    text = text.replace('.', '·')          # Punkt ersetzen
    text = re.sub(r'[<>:{}|]', '', text)   # Entferne weitere problematische Zeichen
    return text

# Generated by ChatGPT-4o
def antlr_tree_to_pydot(tree, graph=None, parent=None):
    import uuid
    if graph is None:
        graph = pydot.Dot("AST", graph_type="digraph")

    # Label für aktuellen Knoten erzeugen
    if isinstance(tree, TerminalNodeImpl):
        label = tree.getText()
    else:
        label = type(tree).__name__.replace("Context", "")

    safe_label = escape_label(label)
    node_id = str(uuid.uuid4())

    # WICHTIG: Label in doppelte Anführungszeichen setzen
    node = pydot.Node(node_id, label=f'"{safe_label}"')
    graph.add_node(node)

    if parent is not None:
        graph.add_edge(pydot.Edge(parent, node))

    for i in range(tree.getChildCount()):
        child = tree.getChild(i)
        antlr_tree_to_pydot(child, graph, node)

    return graph



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Extract function calls from VBScript code.")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--file", type=str, help="Path to the VBScript file.")
    group.add_argument("--code", type=str, help="Raw VBScript code string.")

    args = parser.parse_args()

    if args.file:
        with open(args.file, 'r', encoding='utf-8') as f:
            vbscript_code = f.read()
    else:
        vbscript_code = args.code

    print("\nWrote code to target file!")
